<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PaaS.Ticketing.Api</name>
    </assembly>
    <members>
        <member name="M:PaaS.Ticketing.Api.Controllers.v1.ConcertsController.GetAllConcerts">
            <summary>
            Get concerts
            </summary>
            <remarks>Provides a complete object for all known concerts</remarks>
            <returns>Return a list of Concerts</returns>
        </member>
        <member name="M:PaaS.Ticketing.Api.Controllers.v1.ConcertsController.GetConcert(System.Guid,System.Nullable{System.Int32})">
            <summary>
            Get single concert
            </summary>
            <param name="id">Concert identifier</param>
            <remarks>Get information of a single concert</remarks>
            <returns>Return a single concert</returns>
        </member>
        <member name="M:PaaS.Ticketing.Api.Controllers.v1.ConcertsController.GetUsersByConcert(System.Guid)">
            <summary>
            Get users of a concert
            </summary>
            <param name="id">Concert identifier</param>
            <remarks>Get users of a single concert</remarks>
            <returns>Return a list of users</returns>
        </member>
        <member name="M:PaaS.Ticketing.Api.Controllers.v1.ErrorController.Error(System.Int32)">
            <summary>
            Manages the unmatched routes
            </summary>
            <param name="code">HTTP status code</param>
            <returns>Error formatted as application/problem+json</returns>
        </member>
        <member name="T:PaaS.Ticketing.Api.Controllers.v1.HealthController">
            <summary>
            Health endpoint for availability tests
            </summary>
        </member>
        <member name="M:PaaS.Ticketing.Api.Controllers.v1.HealthController.Get">
            <summary>
                Get Health
            </summary>
            <remarks>Provides an indication about the health of the runtime</remarks>
        </member>
        <member name="M:PaaS.Ticketing.Api.Controllers.v1.OrdersController.GetOrderById(System.Guid)">
            <summary>
            Get single order (id)
            </summary>
            <param name="id">Order identifier</param>
            <remarks>Search order by Id</remarks>
            <returns>Return an order</returns>
        </member>
        <member name="M:PaaS.Ticketing.Api.Controllers.v1.OrdersController.GetOrderDetails(System.String)">
            <summary>
            Get single order
            </summary>
            <param name="token">Ticket identifier</param>
            <remarks>Get information of a single order</remarks>
            <returns>Return an order</returns>
        </member>
        <member name="M:PaaS.Ticketing.Api.Controllers.v1.OrdersController.GetOrders(System.String)">
            <summary>
            Get orders
            </summary>
            <param name="status">Indicates whether to return a specific status only</param>
            <remarks>Get list of orders</remarks>
            <returns>Return list of orders</returns>
        </member>
        <member name="M:PaaS.Ticketing.Api.Controllers.v1.OrdersController.PlaceOrder(PaaS.Ticketing.ApiLib.DTOs.OrderCreateDto)">
            <summary>
            Place a new order
            </summary>
            <param name="orderCreate">Order json representation</param>
            <remarks>Place new order</remarks>
            <returns>Return the order details</returns>
        </member>
        <member name="M:PaaS.Ticketing.Api.Controllers.v1.OrdersController.UpdateIncrementalJsonPatch(System.Guid,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{PaaS.Ticketing.ApiLib.DTOs.OrderDto})">
            <summary>
            Update Order
            </summary>
            <param name="id">Order identifier</param>
            <param name="order">Operation to be performed on the Player in json-patch+json format</param>
            <remarks>Update the order (incremental update with Json Patch)</remarks>
            <returns>Acknowledge the object has been updated</returns>
        </member>
        <member name="M:PaaS.Ticketing.Api.Controllers.v1.OrdersController.ChangeOrderStatus(System.Guid,PaaS.Ticketing.ApiLib.DTOs.OrderStatusDto)">
            <summary>
            Update order status
            </summary>
            <param name="id">Order identifier</param>
            <param name="orderStatus">Status object</param>
            <remarks>Update the order status</remarks>
            <returns>Accepted</returns>
        </member>
        <member name="T:PaaS.Ticketing.Api.Controllers.v1.RootController">
            <summary>
            API root
            </summary>
        </member>
        <member name="M:PaaS.Ticketing.Api.Controllers.v1.UsersController.GetAllUsers(System.Nullable{System.Int32})">
            <summary>
            Get users
            </summary>
            <param name="page"></param>
            <remarks>Provides a complete object for all known users</remarks>
            <returns>Return a list of Concerts</returns>
        </member>
        <member name="M:PaaS.Ticketing.Api.Controllers.v1.UsersController.GetUserProfile(System.Guid)">
            <summary>
            Get single user
            </summary>
            <param name="id">User identifier</param>
            <remarks>Get information of a single user</remarks>
            <returns>Return a single user</returns>
        </member>
        <member name="M:PaaS.Ticketing.Api.Controllers.v1.UsersController.CreateUserProfile(PaaS.Ticketing.ApiLib.DTOs.UserCreateDto)">
            <summary>
            Create a new User
            </summary>
            <param name="user">User json representation</param>
            <remarks>Create a new userr</remarks>
            <returns>Return the new user</returns>
        </member>
        <member name="M:PaaS.Ticketing.Api.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment,PaaS.Ticketing.ApiLib.Context.TicketingContext)">
            <summary>
            // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app">application builder</param>
            <param name="env">hosting environment</param>
            <param name="concertContext">db context</param>
        </member>
    </members>
</doc>
